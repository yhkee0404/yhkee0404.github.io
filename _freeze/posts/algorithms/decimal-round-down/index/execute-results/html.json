{
  "hash": "e412cca6926975ba9ebf79c3d590a571",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"이진수 대신 십진수를 쓰면 오차가 없어질까?\"\nauthor: \"Yunho Kee\"\ndate: \"2024-05-26\"\ncategories:\n  - algorithms\n  - float\n  - decimal\n  - python\nimage: elimende-inagella-4ApmfdVo32Q-unsplash.jpg\n---\n\n## Intro\n\n![Photo by <a href=\"https://unsplash.com/@elimendeinagella?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Elimende Inagella</a> on <a href=\"https://unsplash.com/photos/white-sheep-on-white-surface-4ApmfdVo32Q?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\">Unsplash</a>](elimende-inagella-4ApmfdVo32Q-unsplash.jpg){fig-alt=\"A photo of 2+2=5.\"}\n  \n정수 아닌 실수 연산은 오차 관리가 더 힘들다. 십진수를 쓰면 문제가 없을까?\n\n## 정수 오차\n\n저장 용량에 따른 자릿수를 초과하면 이진법이나 십진법이나 오차가 있다.\n\n## 실수 오차\n\n정수 아닌 실수도 마찬가지인데 소수점 이하 자릿수가 무한일 수 있다: 무한소수.\n\n::: {#3a321632 .cell execution_count=1}\n``` {.python .cell-code}\nfour = (7 - 10 / 6 * 3) * 2\nprint(four)\nprint(int(four))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.0\n4\n```\n:::\n:::\n\n\n::: {#555fd240 .cell execution_count=2}\n``` {.python .cell-code}\nfrom decimal import Decimal, ROUND_DOWN\n\nfour = (Decimal('7') - Decimal('10') / Decimal('6') * Decimal('3')) * 2\nprint(four)\nprint(int(four))\nprint(four.quantize(Decimal('0'), ROUND_DOWN))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.999999999999999999999999998\n3\n3\n```\n:::\n:::\n\n\n## 오차 관리\n\n소수점 이하 무한한 자릿수가 모두 필요할 일은 거의 없다. 가령 소수점 이하 `n`번째 자리에서 실수 연산의 최소 오차를 예상할 수 있다면 그보다 작은 수를 가령 `n + 1`번째 자리에 `1`을 더하거나 빼 주면 된다.\n\n::: {#eca91432 .cell execution_count=3}\n``` {.python .cell-code}\n_EPSILON = 1e-2\n\nfour = (7 - 10 / 6 * 3) * 2 + _EPSILON\nprint(four)\nprint(int(four))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.01\n4\n```\n:::\n:::\n\n\n::: {#2a3af631 .cell execution_count=4}\n``` {.python .cell-code}\nfrom decimal import Decimal, ROUND_DOWN\n\n_EPSILON = Decimal('1e-2')\n\nfour = (Decimal('7') - Decimal('10') / Decimal('6') * Decimal('3')) * 2 + _EPSILON\nprint(four)\nprint(int(four))\nprint(four.quantize(Decimal('0'), ROUND_DOWN))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.009999999999999999999999998\n4\n4\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}