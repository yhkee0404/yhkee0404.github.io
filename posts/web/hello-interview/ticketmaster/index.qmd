---
title: "DB 병목을 나누는 시스템 설계"
subtitle: "공연 예약 시스템"
author: "Yunho Kee"
institute: |
  [\[Bay Area K Group\] 스터디 클럽++](https://svkoreans.com/com_group/365){style="color:var(--r-link-color);"}
date: "2025-03-29"
date-modified: "2025-03-31"
categories:
  - web
  - "system design"
  - "lost update"
  - "isolation"
  - "redis"
  - "RedLock"
  - "elasticsearch"
  - "content distribution networks"
  - "long polling"
  - "server-sent events"
  - "WebSockets"
  - "change data capture"
  - "full-text indexes"
  - "inverted indexes"
  - "Bay Area K Group"
  - "Ticketmaster"
bibliography:
  - kang2024lost_update.bib
  - king_ticketmaster.bib
  - mihalcea2023lost_update.bib
  - ringer2014postgres.bib
  - ullman2014first.bibtex
nocite: |
  @*
image: /_images/thumbnails/aurelien-thomas-Ms9sjaDRW9A-unsplash.jpg
format:
  revealjs:
    title-slide-attributes:
        data-background-image: "{{< meta image >}}"
        data-background-size: contain
        data-background-opacity: "0.5"
    include-in-header:
      - text: |
          <link href="../../../../site_libs/bootstrap/bootstrap-icons.css" rel="stylesheet">
    theme: beige
    slide-number: true
    chalkboard: 
      buttons: false
    preview-lines: auto
    logo: /_images/logos/869e2ce3002521ca17c01eaa6e9fa3d4.webp
    footer: '[<i class="bi bi-github"></i> View Source](https://github.com/yhkee0404/yhkee0404.github.io/blob/main/posts/web/hello-interview/ticketmaster/index.qmd)'
---

## 기능적 시스템 요구사항 분석

::::: {.columns}

:::: {.column}

### 필수 기능

사용자가 직접 사용할 기능

::: {.fragment .fade-up}

* 자원 현황 검색
* 자원 현황 조회
* 실시간 자원 선점

:::

::::

::::{.column}

### 부가 기능

우선 순위 질문 후 폐기

::: {.fragment .fade-up}

* 자원 생성/변경/삭제
* 이전 현황 검색/조회
* 사용자별 자원 조회
* 시세 변동

:::

::::

:::::

## 비기능적 시스템 요구사항 분석 {.smaller}

::::: {.columns}

:::: {.column}

### 특수 제약

어떤 성능이 관건일까?

::: {.fragment .fade-up}

* CAP Theorem
  * Consistency:  
    Concurrent Booking
  * Availability:  
    Live View
* Read/Write Ratio: Anonymous Guests
* Bursts: Popular Events

:::

::::

::::{.column}

### 선택 목표

다다익선

::: {.fragment .fade-up}

* Security, i.e. Authentication
* CI/CD Pipelines
* Backups
* General Data Protection Regulation
* Fault Tolerance

:::

::::

:::::

# Functional High-Level Design

## Functional Core Entities

1. User: Dummy
2. Venue: 장소 &harr; Seat Map
3. Event: 시간, 장소
   * Ticket[]
4. Ticket: 시간별, 장소별 Seat Map 자원
5. Performer: Dummy
6. Booking: Dummy
   * Ticket[]

## Functional API

::::{.columns}

:::{.column}

1. `GET /events/search`  
   &rarr; Event[]
   * ```
     ?keyword=Tailor  
     &start=2025-03-01&end=2025-04-01  
     &pageSize=10&page=1
     ```
2. `GET /events/:eventId`  
   &rarr; Event, Venue, Performer, Ticket[]

:::

:::{.column}

3. `POST /bookings/:eventId`  
   &rarr; bookingId
   * ```
     {
       "ticketIds": string[], 
       "paymentDetails": ...
     }
     ```

:::

::::

## Functional High-Level Design {.smaller}

::::{.columns}

:::{.column width="40%"}

1. Single Scalable API Gateway
   * Routing/Forwarding
   * Rate Limit
   * Authentication
   * Logging
2. Microservices
   * One Application Service per One API

:::

:::{.column width="30%"}

3. (Sidecars of Load Balancers)
   * Horizontal Scale Out
   * Least Connections
   * Round Robin
  
:::

:::{.column width="30%"}

4. Familiar DBMS for Persistence and Consistency
   * RDBMS, e.g. PostgreSQL
   * NoSQL, e.g. DynamoDB
5. External API for Payment
   * Asynchronous Webhooks

:::

::::

## Lost Updates Prevention

::::{.columns}

:::{.column width="30%"}

### Transaction A

Read AVAILABLE  
<br/>
<br/>
<br/>
Write BOOKED  
Commit

:::

:::{.column width="30%"}

### Transaction B

<br/>
Read AVAILABLE
Write BOOKED  
Commit

:::

:::{.column width="40%"}

1. ```
SELECT ... FOR UPDATE
   ```
* Isolation Level
  2. SERIALIZABLE, REPEATABLE READ ^[compare @mihalcea2023lost_update with @kang2024lost_update]
  3. READ UNCOMMITTED ^[@ullman2014first, pp. 296-297]
     * ```
     UPDATE ... WHERE BOOKED=FALSE
       ```

:::

::::

# Non-Functional Deep Dives

## 1. Payment Availability: Move Lock Up and Hold Longer {.smaller}

1. Brute Force without Database Column Addition
   * No Native Timeout for PostgreSQL? ^[but see @ringer2014postgres]
* Database Column Addition: Expiration Time
  2. Cron: Periodic Expiration  
     * Additional Dependency aside from Database
  3. Lazy Expiration
4. (Atomic) Cache: Natural Expiration of Time To Live
   * Additional Dependency aside from Database
   * RedLock: Scalable Distributed Locks

## 2. Live View Availability

1. Long Polling
2. Server-Sent Events
   * Unidirectional
3. WebSockets  
   * Bidirectional, Full-Duplex
   4. (Virtual) Waiting Queue
      * Dequeue Timing
        * Metadata

## 3. Common Read Performance {.smaller}

::::{.columns}

:::{.column width="40%"}

1. Cache: Redis, MemCached
   * Read-Through Cache Strategy
     * Sync Triggers
   * Individual TTLs
   * Content Distribution Networks
     * AWS CloudFront

:::

:::{.column width="30%"}

2. Index
   * Compound Index
     * Columns to Rows
   * Partial Index
   * Covering Index
3. Materialized View

:::

:::{.column width="30%"}

4. SQL
   * `EXPLAIN`: Query Execution Plan Analysis
   * Avoidance of `SELECT *`
   * `LIMIT`, Pagination
   * `UNION` instead of `OR`

:::

::::

## 4. Search Performance

::::{.columns}

:::{.column}

### 1. Full-Table Scan Latency

`%LIKE%`

* Full-Text Search
  * Inverted Indexes
    * Keywords to Rows
    * Fuzzy Search
  * Database Indexes
  * ElasticSearch
    * Change Data Capture

:::

:::{.column}

### 2. Frequent Queries

* ElasticSearch/OpenSearch
  * Node Level Filter
    * Least Recently Used Cache
  * Shard Level Aggregation
    * Adaptive Caching Strategies

:::

::::

---

## References

