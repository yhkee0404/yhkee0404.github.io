# MIT License only for this single file
# Copyright (c) 2025 Yunho Kee
# Copyright (c) 2024 Chris Arderne
# Copyright (c) 2022 David Vujic

[project]
name = "yhkee0404"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
  "confluent-kafka~=2.3.0",
  "fastapi~=0.115.12",
  "functions-framework~=3.5.0",
  "sqlalchemy~=2.0.28",
  "uvicorn~=0.27.1",
]

[dependency-groups]
dev = [
  "poethepoet>=0.35.0",
  "polylith-cli>=1.30.1",
  "pyright>=1.1.402",
  "pytest>=8.4.0",
  "ruff>=0.11.13",
  "types-confluent-kafka>=1.3.6",
]

[tool.uv.workspace]
# Adapted from DavidVujic/python-polylith#271
members = ["projects/*"]


[tool.polylith.bricks]
"bases/yhkee0404/example_consumer" = "yhkee0404/example_consumer"
"bases/yhkee0404/example_message_api" = "yhkee0404/example_message_api"
"bases/yhkee0404/example_greet_api" = "yhkee0404/example_greet_api"
"bases/yhkee0404/example_greet_gcp_function" = "yhkee0404/example_greet_gcp_function"
"bases/yhkee0404/example_greet_aws_lambda" = "yhkee0404/example_greet_aws_lambda"
"components/yhkee0404/example_message" = "yhkee0404/example_message"
"components/yhkee0404/example_kafka" = "yhkee0404/example_kafka"
"components/yhkee0404/example_greeting" = "yhkee0404/example_greeting"
"components/yhkee0404/example_database" = "yhkee0404/example_database"
"components/yhkee0404/example_schema" = "yhkee0404/example_schema"
"components/yhkee0404/example_log" = "yhkee0404/example_log"
"components/yhkee0404/example_dictionaries" = "yhkee0404/example_dictionaries"
"components/yhkee0404/pattern_observer" = "yhkee0404/pattern_observer"
[build-system]
# Adapted from DavidVujic/python-polylith-docs
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
# Adapted from DavidVujic/python-polylith-docs
dev-mode-dirs = ["components", "bases", "development", "."]

# [tool.hatch.metadata]
# Adapted from DavidVujic/python-polylith-example-uv
# allow-direct-references = true

[tool.ruff]
# Adapted from carderne/postmodern-python/
# if this is a library, enter the _minimum_ version you
# want to support, otherwise do py313
target-version = "py312"
line-length = 120  # use whatever number makes you happy

# Adapted from DavidVujic/python-polylith-example-uv
src = ["components", "bases"]
exclude = [
  ".git",
  ".github",
  "__pycache__",
  ".mypy_cache",
  ".ruff_cache",
  "dist",
  ".venv",
  "./development/*.py",
]

[tool.ruff.lint]
# Adapted from carderne/postmodern-python/
# you can see the looong list of rules here:
# https://docs.astral.sh/ruff/rules/
# here's a couple to start with
select = [
  "A",    # warn about shadowing built-ins
  "E",    # style stuff, whitespaces
  "F",    # important pyflakes lints
  "I",    # import sorting
  "N",    # naming
  "T100", # breakpoints (probably don't want these in prod!)
]
# if you're feeling confident you can do:
# select = ["ALL"]
# and then manually ignore annoying ones:
# ignore = [...]

[tool.ruff.lint.isort]
# Adapted from carderne/postmodern-python/
# so it knows to group first-party stuff last
known-first-party = ["yhkee0404"]

[tool.pyright]
# Adapted from carderne/postmodern-python/
venvPath = "."          # uv installs the venv in the current dir
venv = ".venv"          #       in a folder called `.venv`
strict = ["**/*.py"]    # use 'strict' checking on all files
pythonVersion = "3.12"  # if library, specify the _lowest_ you support

# Adapted from DavidVujic/python-polylith-docs
extraPaths = ["bases", "components"]


[tool.pytest.ini_options]
addopts = [
  # Adapted from carderne/postmodern-python/
  "--doctest-modules",

  # Adapted from DavidVujic/python-polylith-example-uv
  "-vv",
]

# Added by yhkee0404
consider_namespace_packages = true
# pythonpath = ["bases", "components"]

[tool.poe.tasks]
# Adapted from carderne/postmodern-python/
# run with eg `uv run poe fmt`
fmt = "ruff format"
lint = "ruff check --fix"
check = "pyright"
test = "pytest"
# run all the above
all = [ {ref="fmt"}, {ref="lint"}, {ref="check"}, {ref="test"} ]

# Adapted from carderne/postmodern-python/
"ci:fmt" = "ruff format --check"  # fail if not formatted
"ci:lint" = "ruff check"
